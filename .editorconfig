# EditorConfig is awesome:http://EditorConfig.org

# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = space
# (Please don't specify an indent_size here; that has too many unintended consequences.

# RS1024: Compare symbols correctly
# https://github.com/dotnet/roslyn-analyzers/issues/3389
dotnet_diagnostic.RS1024.severity = none

# IDE0078: Use pattern matching
# https://github.com/dotnet/roslyn/issues/51691
# https://github.com/dotnet/roslyn/issues/51693
dotnet_diagnostic.IDE0078.severity = silent


#dotnet_diagnostic.IDE0059.severity = silent

# Code files
[*.{cs}]
indent_size = 4

# Xml project files
[*.{csproj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

### Dotnet code style settings ###

[*.{cs}]
# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:silent
dotnet_style_qualification_for_property = false:silent
dotnet_style_qualification_for_method = false:silent
dotnet_style_qualification_for_event = false:silent

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:warning

# Field preferences
dotnet_style_readonly_field = true:warning

# Parameter preferences
dotnet_code_quality_unused_parameters = all:warning

# Expression-level preferences
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_object_initializer = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion

### CSharp code style settings ###
[*.cs]

#### C# Coding Conventions ####

# Prefer "var" everywhere
csharp_style_var_for_built_in_types = true:silent
csharp_style_var_when_type_is_apparent = true:silent
csharp_style_var_elsewhere = true:silent

# Prefer method-like constructs to have a block body, except for lambdas
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none
csharp_style_expression_bodied_local_functions = false:none
csharp_style_expression_bodied_lambdas = true:none


# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion

# Null-checking preferences
csharp_style_conditional_delegate_call = true:warning

# Modifier preferences
csharp_prefer_static_local_function = true:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:silent

# Code-block preferences
csharp_prefer_braces = when_multiline:none
csharp_prefer_simple_using_statement = true:warning

# Expression-level preferences
csharp_style_unused_value_assignment_preference = discard_variable:warning
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_prefer_index_operator = true:none
csharp_style_prefer_range_operator = true:none
csharp_style_throw_expression = true:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:silent

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = no_change
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# IDE0057: Use range operator
dotnet_diagnostic.IDE0057.severity = silent

# IDE0056: Use index operator
dotnet_diagnostic.IDE0056.severity = silent

### Configuration for IDE code style by diagnostic IDs ###
[*.{cs}]

# Namespace declaration preferences: IDE0160 Use block-scoped namespace
dotnet_diagnostic.IDE0160.severity = none

# Namespace declaration preferences: IDE0161 Use file-scoped namespace
#dotnet_diagnostic.IDE0160.severity = none

# Default severity for all IDE code style rules with category 'Style'
dotnet_analyzer_diagnostic.category-Style.severity = warning

# Default severity for all IDE code quality rules with category 'CodeQuality'
dotnet_analyzer_diagnostic.category-CodeQuality.severity = warning

# IDE0066: Convert switch statement to expression
dotnet_diagnostic.IDE0066.severity = suggestion

# IDE0073: File header
file_header_template =Copyright (c) Mohamed Hassan & Contributors. All rights reserved. See License.md in the project root for license information.

# IDE0001: Name can be simplified
dotnet_diagnostic.IDE0001.severity = silent

# IDE0002: Member access can be simplified
dotnet_diagnostic.IDE0002.severity = silent

# IDE0003: Remove this or Me qualification
dotnet_diagnostic.IDE0003.severity = silent

# IDE0007: Use 'var' instead of explicit type
dotnet_diagnostic.IDE0007.severity = silent

# IDE0010: Add missing cases in switch statement
dotnet_diagnostic.IDE0010.severity = silent

# IDE0017: Object initialization can be simplified
dotnet_diagnostic.IDE0017.severity = silent

# IDE0045: 'if' statement can be simplified
dotnet_diagnostic.IDE0045.severity = silent

# IDE0046: 'if' statement can be simplified
dotnet_diagnostic.IDE0046.severity = silent

# IDE0048: Parentheses should be added for clarity
dotnet_diagnostic.IDE0048.severity = silent

# IDE0058: Expression value is never used
dotnet_diagnostic.IDE0058.severity = silent

dotnet_diagnostic.IDE0062.severity = silent

# IDE0065: Using directives must be placed outside of a namespace declaration
# Can remove the below entry and turn it into a warning once https://github.com/dotnet/roslyn/issues/43271 is resolved.
dotnet_diagnostic.IDE0065.severity = silent

# IDE0072: Populate switch
dotnet_diagnostic.IDE0072.severity = silent

# IDE0083: Use pattern matching
dotnet_diagnostic.IDE0083.severity = silent

# IDE0120: Simplify linq expression
dotnet_diagnostic.IDE0120.severity = silent

# IDE0130: Namespace does not match folder structure
dotnet_diagnostic.IDE0130.severity = silent

# IDE0150: Null check can be clarified
dotnet_diagnostic.IDE0150.severity = silent

dotnet_diagnostic.IDE0220.severity = silent

### Configuration for FxCop analyzers executed on this repo ###
[*.{cs}]

#disable sonar
#dotnet_diagnostic.Sxxx.severity = none

# Default analyzed API surface = 'all' (public APIs + non-public APIs)
dotnet_code_quality.api_surface = all

# Restrict the analyzed API surface for certain analyzers to 'public' (public APIs only).
# CA1043: Use integral or string argument for indexers
dotnet_code_quality.CA1043.api_surface = public

# CA1707: Identifiers should not contain underscores
dotnet_code_quality.CA1707.api_surface = public

# CA1720: Identifiers should not contain type names
dotnet_code_quality.CA1720.api_surface = public

# Exclude single letter type parameter names
# CA1715: Identifiers should have correct prefix
dotnet_code_quality.CA1715.exclude_single_letter_type_parameters = true

# CA1002: Do not expose generic lists
dotnet_diagnostic.CA1002.severity = suggestion

# CA1024: Use properties where appropriate
dotnet_diagnostic.CA1024.severity = suggestion

# CA1033: Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = suggestion

# CA1307: Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = suggestion

# CA1711: Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1711.severity = suggestion

# CA1309: Use ordinal string comparison
dotnet_diagnostic.CA1309.severity = suggestion

### Configuration for PublicAPI analyzers executed on this repo ###
[*.{cs}]

# Analyzers bail-out if the PublicAPI.*.txt file is not found
dotnet_public_api_analyzer.require_api_files = true

### Configuration for vs-threading analyzers executed on this repo ###
[*.{cs}]

# VSTHRD002: Avoid problematic synchronous waits
dotnet_diagnostic.VSTHRD002.severity = none

# VSTHRD011: Use AsyncLazy<T>
dotnet_diagnostic.VSTHRD011.severity = none

#################################### cs 12
# IDE0028: Collection initialization can be simplified
dotnet_diagnostic.IDE0028.severity = suggestion

# IDE0300: Collection initialization can be simplified
dotnet_diagnostic.IDE0300.severity = suggestion


# IDE0301: Collection initialization can be simplified
dotnet_diagnostic.IDE0301.severity = suggestion

#ToArray, ToList
# IDE0305: Collection initialization can be simplified
dotnet_diagnostic.IDE0305.severity = none

#IDE0290 Use primary constructor
dotnet_diagnostic.IDE0290.severity = none

###############################CA messages
#CA1307: Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = none

#CA1002: Do not expose generic lists
dotnet_diagnostic.CA1002.severity = none

#CA1309: Use ordinal StringComparison
dotnet_diagnostic.CA1309.severity = none

#CA1711: Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1711.severity = none

#CA1822: Mark members as static
dotnet_diagnostic.CA1822.severity = none

#CA1024: Use properties where appropriate
dotnet_diagnostic.CA1024.severity = none

#CA1050: Declare types in namespaces
dotnet_diagnostic.CA1050.severity = none

#CA1834: Use StringBuilder.Append(char) for single character strings
dotnet_diagnostic.CA1834.severity = none

#CA2211: Non-constant fields should not be visible
dotnet_diagnostic.CA2211.severity = none

#sonar pragma
#IDE0079: Remove unnecessary suppression 
#dotnet_diagnostic.IDE0079.severity = none

#CA1825: Avoid zero-length array allocations
dotnet_diagnostic.CA1825.severity = none

######################################## NUnit 

# NUnit2002: Consider using Assert.That(expr, Is.False) instead of ClassicAssert.IsFalse(expr)
#dotnet_diagnostic.NUnit2002.severity = suggestion

# NUnit2003: Consider using Assert.That(expr, Is.True) instead of ClassicAssert.IsTrue(expr)
#dotnet_diagnostic.NUnit2003.severity = suggestion

# NUnit2010: Use EqualConstraint for better assertion messages in case of failure
#dotnet_diagnostic.NUnit2010.severity = suggestion

# NUnit2011: Use ContainsConstraint for better assertion messages in case of failure
#dotnet_diagnostic.NUnit2011.severity = suggestion

# NUnit2019: Consider using Assert.That(expr, Is.Not.Null) instead of ClassicAssert.IsNotNull(expr)
#dotnet_diagnostic.NUnit2019.severity = suggestion

# NUnit2035: Consider using Assert.That(collection, Is.Empty) instead of ClassicAssert.IsEmpty(collection)
#dotnet_diagnostic.NUnit2035.severity = suggestion

# NUnit2043: Use ComparisonConstraint for better assertion messages in case of failure
#dotnet_diagnostic.NUnit2043.severity = suggestion

# NUnit2045: Use Assert.Multiple
#dotnet_diagnostic.NUnit2045.severity = suggestion

# NUnit2046: Use CollectionConstraint for better assertion messages in case of failure
#dotnet_diagnostic.NUnit2046.severity = suggestion

# NUnit1028: The non-test method is public
dotnet_diagnostic.NUnit1028.severity = none

